#include  <stdio.h>
int partition(int arr[],int low,int high)
{
    int pivot = arr[low];
    int i=low+1,j=high,temp;
    do{
        while(arr[i]<=pivot)
            i++;
        while(arr[j]>pivot)
            j--;
        if(i<j)
        {
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }while(i<=j);
    temp = arr[low];
    arr[low] = arr[j];
    arr[j] = temp;
    return j;
}
void quick_sort(int arr[],int low,int high)
{
    if(low<high)
    {
        int partition_index = partition(arr,low,high);
        quick_sort(arr,low,partition_index-1);
        quick_sort(arr,partition_index+1,high);
        
    }    
}

void print_array(int arr[],int n)
{
    
    for(int k=0;k<n;k++)
    {
        printf("%d ",arr[k]);
    }
    printf("\n\n");
    
    
}

void merge(int arr[],int low,int high,int mid)
{
    int i = low;
    int j = mid + 1;
    int k = low;
    int b[100];
    while(i<=mid && j<=high)
    {
        if(arr[i]<arr[j])
        {
            b[k] = arr[i];
            k++;
            i++;
        }
        else
        {
            b[k] = arr[j];
            k++;
            j++;
        }
    }
    while(i<=mid)
    {
        b[k] = arr[i];
        k++;
        i++;
    }
    while(j<=high)
    {
        b[k] = arr[j];
        k++;
        j++;
    }
    for(int i = low;i<=high;i++)
    {
        arr[i] = b[i];
    }
}

void merge_sort(int arr[],int low,int high)
{
    int mid;
    if(low<high)
    {
        mid = (low + high)/2;
        merge_sort(arr,low,mid);
        merge_sort(arr,mid+1,high);
        merge(arr,low,high,mid);
    }
}
int main()
{
    int n,option;
    printf("Enter size of array\n");
    scanf("%d",&n);
    int arr[n];
    printf("Enter numbers in the array\n");
    for(int i = 0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    while(1)
    {
        printf("Select type of sort\n1:Merge Sort\n2:Quick Sort\n3:Exit\n");
        scanf("%d",&option);
        switch(option)
        {
            case 1: merge_sort(arr,0,n-1);
                    printf("The sorted array using merge sort is\n");
                    print_array(arr,n);
                    break;
            case 2: quick_sort(arr,0,n-1);
                    printf("The sorted array using quick sort is\n");
                    print_array(arr,n);
                    break;
            case 3: exit(1);
                    break;
                
        }
        
    }
  return 0;
}
